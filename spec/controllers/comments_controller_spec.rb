require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:user) {FactoryGirl.create(:user)}
  let(:article_attr) {FactoryGirl.attributes_for(:article)}
  let(:valid_attributes) {FactoryGirl.attributes_for(:comment)}
  
  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  before do
    @request.env["devise.mapping"] = Devise.mappings[:user]
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommentsController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  describe "valid user" do
    before do
      sign_in(user)
    end
  
  describe "GET #edit" do
    it "assigns the requested comment as @comment" do
      article = user.articles.create! article_attr
      comment = article.comments.create! valid_attributes
      comment.update_attributes(user_id: user.id)
      get :edit, { article_id: article.id, id: comment.id } 
      expect(assigns(:comment)).to eq(comment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        comment.update_attributes(user_id: user.id)
      
        expect {
          post :create, {comment: valid_attributes, article_id: article.id}
        }.to change(article.comments, :count).by(1)
      end

      it "assigns a newly created comment as @comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        comment.update_attributes(user_id: user.id)
      
        post :create, {comment: valid_attributes, article_id: article.id}
        expect(assigns(:comment)).to be_a(Comment)
        expect(assigns(:comment)).to be_persisted
      end

      it "redirects to the created comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        comment.update_attributes(user_id: user.id)
      
        post :create, {comment: valid_attributes, article_id: article.id}
        #binding.pry
        #expect(response).to redirect_to(article.comments.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        post :create, {comment: invalid_attributes}
        expect(assigns(:comment)).to be_a_new(Comment)
      end

      it "re-renders the 'new' template" do
        post :create, {comment: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do {
          description: "Hi all!!!"
        }
      end

      it "updates the requested comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        put :update,  {id: comment.to_param, comment: new_attributes, article_id: article.id}
        comment.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested comment as @comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        put :update,  {id: comment.to_param, comment: new_attributes, article_id: article.id}
        expect(assigns(:comment)).to eq(comment)
      end

      it "redirects to the comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        put :update, {id: comment.to_param, comment: new_attributes, article_id: article.id}
        #expect(response).to redirect_to(comment)
      end
    end

    context "with invalid params" do
      it "assigns the comment as @comment" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        put :update,  {id: comment.to_param, comment: invalid_attributes}
        expect(assigns(:comment)).to eq(comment)
      end

      it "re-renders the 'edit' template" do
        article = user.articles.create! article_attr
        comment = article.comments.create! valid_attributes
        put :update, {id: comment.to_param, comment: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comment" do
      article = user.articles.create! article_attr
      comment = article.comments.create! valid_attributes
      expect {
        delete :destroy, {id: comment.id, article_id: article.id}
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      article = user.articles.create! article_attr
      comment = article.comments.create! valid_attributes
      delete :destroy,  {id: comment.id, article_id: article.id}
      #expect(response).to redirect_to(comments_url)
    end
  end

  end

end
