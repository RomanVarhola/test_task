require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.


RSpec.describe ArticlesController, type: :controller do
  let(:user) {FactoryGirl.create(:user)}
  let(:valid_attributes) { FactoryGirl.attributes_for(:article)}
  let(:invalid_attributes) do {
   { title: '', content: '' }
  end

  before do
    @request.env["devise.mapping"] = Devise.mappings[:user]
  end
  
  describe "valid user" do
    before do
      sign_in(user)
    end
    
    describe "GET show" do
      it "assigns the requested article as @article" do
        article = user.articles.create! valid_attributes
        get :show, {user_id: user.id, id: article.id }
        expect(article.title).to eql valid_attributes[:title]
        expect(article.content).to eql valid_attributes[:content] 
        expect(assigns(:article)).to eq(article)
      end
    end
    describe "GET new" do
      it "assigns a new article as @article" do
        get :new, { user_id: user.id }
        expect(assigns(:article)).to be_a_new(Article)
      end
    end
    describe "GET edit" do
      it "assigns the requested article as @article" do
        article = user.articles.create! valid_attributes
        article = Article.find(article.id) 
        get :edit, { user_id: user.id, id: article.id }
        expect(article.title).to eql valid_attributes[:title]
        expect(article.content).to eql valid_attributes[:content] 
        expect(assigns(:article)).to eq(article)
      end
    end
    describe "POST create" do
      describe "with valid params" do
        it "creates a new Article" do
          expect {
          post :create, {article: valid_attributes}
        }.to change{Article.count}.by(1)
        end

        it "assigns a newly created article as @article" do
          post :create, {:article => valid_attributes }
          expect(assigns(:article)).to be_a(Article)
          article = user.articles.create!(valid_attributes)
          expect(assigns(:article)).to be_a(Article)
          expect(assigns(:article)).to be_persisted
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved article as @article" do
          allow_any_instance_of(Article).to receive(:save).and_return(false)
          post :create, {article: invalid_attributes}
          expect(assigns(:article)).to be_a_new(Article)
        end

        it "re-renders the 'new' template" do
          allow_any_instance_of(Article).to receive(:save).and_return(false)
          post :create, {user_id: user.id, :article => { "name" => "invalid value" }}
          expect(response).to render_template("new")
        end
      end
    end
    describe "PUT update" do
      describe "with valid params" do
        let(:update_attributes) do {
          title: "Hi!", content: 'Hi all!!!'
        }
      end
        it "updates the requested article" do
          article = user.articles.create! valid_attributes
          #expect_any_instance_of(user.articles).to receive(:update_attributes).with({"title" => "Hi","content" => "Hi all!!!"})
          put :update, {:id => article.id, :article => {"title" => "Hi","content" => "Hi all!!!"}}
        end

        it "assigns the requested article as @article" do
          article = user.articles.create! valid_attributes
          put :update, {:id => article.id, :article => valid_attributes}
          expect(assigns(:article)).to eq(article)
        end

        it "redirects to the article" do
          article = user.articles.create! valid_attributes
          put :update, {:id => article.id, :article => valid_attributes}
          #expect(response).to redirect_to(article)
        end
      end

      describe "with invalid params" do
        it "assigns the channel group as @channel_group" do
          article = user.articles.create! valid_attributes
          allow_any_instance_of(Article).to receive(:save).and_return(false)
          put :update, {:id => article.id, :article => { "name" => "invalid value" }}
          expect(assigns(:article)).to eq(article)
        end

        it "re-renders the 'edit' template" do
          article = user.articles.create! valid_attributes
          allow_any_instance_of(Article).to receive(:save).and_return(false)
          put :update, {:id => article.id, :article => { "name" => "invalid value" }}
          #expect(response).to render_template("edit")
        end
      end
    end
    describe "DELETE destroy" do
      it "destroys the requested channel_group" do
        article = user.articles.create! valid_attributes
        expect {
          delete :destroy, {:id => article.id}
        }.to change(user.articles, :count).by(-1)
      end

      it "redirects to the user path" do
        article = user.articles.create! valid_attributes
        delete :destroy, { :id => article.id }
        #expect(response).to redirect_to(user_path(user))
      end
    end
  end
end

